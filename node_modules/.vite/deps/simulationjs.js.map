{
  "version": 3,
  "sources": ["../../.pnpm/simulationjs@3.7.9/node_modules/simulationjs/dist/simulation.js"],
  "sourcesContent": ["export class LightSource {\n    pos;\n    id;\n    intensity;\n    constructor(pos, intensity = 1, id = '') {\n        this.pos = pos;\n        this.id = id;\n        this.intensity = intensity;\n    }\n}\nexport class Camera {\n    pos;\n    rot;\n    constructor(pos, rot) {\n        this.pos = pos;\n        rot.x = radToDeg(rot.x);\n        rot.y = radToDeg(rot.y);\n        rot.z = radToDeg(rot.z);\n        this.rot = rot;\n    }\n}\nexport class Vector3 {\n    x;\n    y;\n    z;\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    format() {\n        return `(${this.x}, ${this.y}, ${this.z})`;\n    }\n    clone() {\n        return new Vector3(this.x, this.y, this.z);\n    }\n    rotateX(val) {\n        const initialY = this.y;\n        const initialZ = this.z;\n        this.y = initialY * Math.cos(val) - initialZ * Math.sin(val);\n        this.z = initialY * Math.sin(val) + initialZ * Math.cos(val);\n    }\n    rotateY(val) {\n        const initialX = this.x;\n        const initialZ = this.z;\n        this.x = initialX * Math.cos(val) + initialZ * Math.sin(val);\n        this.z = -initialX * Math.sin(val) + initialZ * Math.cos(val);\n    }\n    rotateZ(val) {\n        const initialX = this.x;\n        const initialY = this.y;\n        this.x = initialX * Math.cos(val) - initialY * Math.sin(val);\n        this.y = initialX * Math.sin(val) + initialY * Math.cos(val);\n        return this;\n    }\n    rotate(vec) {\n        this.rotateZ(degToRad(vec.z));\n        this.rotateX(degToRad(vec.x));\n        this.rotateY(degToRad(vec.y));\n        return this;\n    }\n    multiply(val) {\n        this.x *= val;\n        this.y *= val;\n        this.z *= val;\n        return this;\n    }\n    divide(val) {\n        this.x /= val;\n        this.y /= val;\n        this.z /= val;\n        return this;\n    }\n    add(vec) {\n        this.x += vec.x;\n        this.y += vec.y;\n        this.z += vec.z;\n        return this;\n    }\n    sub(vec) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        this.z -= vec.z;\n        return this;\n    }\n    getMag() {\n        return pythag(pythag(this.x, this.y), this.z);\n    }\n    getRotation() {\n        const ay = radToDeg(Math.atan2(this.x, this.z));\n        const ax = radToDeg(Math.atan2(this.y, this.z));\n        return new Vector(ax, ay);\n    }\n    dot(vec) {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n    normalize() {\n        const mag = this.getMag();\n        this.x /= mag;\n        this.y /= mag;\n        this.z /= mag;\n        return this;\n    }\n    cross(vec) {\n        const i = [this.y, this.z, vec.y, vec.z];\n        const j = [this.x, this.z, vec.x, vec.z];\n        const k = [this.x, this.y, vec.x, vec.y];\n        const determinantI = i[0] * i[3] - i[1] * i[2];\n        const determinantJ = j[0] * j[3] - j[1] * j[2];\n        const determinantK = k[0] * k[3] - k[1] * k[2];\n        return new Vector3(determinantI, -determinantJ, determinantK);\n    }\n}\nexport class Vector {\n    x;\n    y;\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    getRotation() {\n        return radToDeg(Math.atan2(this.y, this.x));\n    }\n    getMag() {\n        return pythag(this.x, this.y);\n    }\n    rotate(deg) {\n        const rotation = this.getRotation();\n        const mag = this.getMag();\n        this.x = Math.cos(degToRad(rotation + deg)) * mag;\n        this.y = Math.sin(degToRad(rotation + deg)) * mag;\n        return this;\n    }\n    draw(c, pos = new Vector(0, 0), color = new Color(0, 0, 0), thickness = 1) {\n        c.beginPath();\n        c.strokeStyle = color.toHex();\n        c.lineWidth = thickness;\n        c.moveTo(pos.x, pos.y);\n        c.lineTo(pos.x + this.x, pos.y + this.y);\n        c.stroke();\n        c.closePath();\n    }\n    normalize() {\n        const mag = this.getMag();\n        if (mag != 0) {\n            this.x /= mag;\n            this.y /= mag;\n        }\n        return this;\n    }\n    multiply(n) {\n        this.x *= n;\n        this.y *= n;\n        return this;\n    }\n    sub(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    }\n    add(v) {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    }\n    divide(n) {\n        this.x /= n;\n        this.y /= n;\n        return this;\n    }\n    appendMag(value) {\n        const mag = this.getMag();\n        if (mag != 0) {\n            const newMag = mag + value;\n            this.normalize();\n            this.multiply(newMag);\n        }\n        return this;\n    }\n    dot(vec) {\n        return this.x * vec.x + this.y * vec.y;\n    }\n    clone() {\n        return new Vector(this.x, this.y);\n    }\n    format() {\n        return `(${this.x}, ${this.y})`;\n    }\n}\nexport class SimulationElement {\n    pos;\n    color;\n    type;\n    running;\n    _3d = false;\n    id;\n    constructor(pos, color = new Color(0, 0, 0), type = null, id = '') {\n        this.pos = pos;\n        this.color = color;\n        this.type = type;\n        this.running = true;\n        this.id = id;\n    }\n    end() {\n        this.running = false;\n    }\n    draw(_) { }\n    setId(id) {\n        this.id = id;\n    }\n    fill(color, t = 0, f) {\n        const currentColor = new Color(this.color.r, this.color.g, this.color.b);\n        const colorClone = color.clone();\n        const changeR = colorClone.r - this.color.r;\n        const changeG = colorClone.g - this.color.g;\n        const changeB = colorClone.b - this.color.b;\n        const func = () => {\n            this.color = colorClone;\n        };\n        return transitionValues(func, (p) => {\n            currentColor.r += changeR * p;\n            currentColor.g += changeG * p;\n            currentColor.b += changeB * p;\n            this.color.r = currentColor.r;\n            this.color.g = currentColor.g;\n            this.color.b = currentColor.b;\n            return this.running;\n        }, func, t, f);\n    }\n    moveTo(p, t = 0, f) {\n        const changeX = p.x - this.pos.x;\n        const changeY = p.y - this.pos.y;\n        return transitionValues(() => {\n            this.pos = p;\n        }, (p) => {\n            this.pos.x += changeX * p;\n            this.pos.y += changeY * p;\n            return this.running;\n        }, () => {\n            this.pos.x = p.x;\n            this.pos.y = p.y;\n        }, t, f);\n    }\n    move(p, t = 0, f) {\n        const changeX = p.x;\n        const changeY = p.y;\n        const startPos = new Vector(this.pos.x, this.pos.y);\n        return transitionValues(() => {\n            this.pos.x += p.x;\n            this.pos.y += p.y;\n        }, (p) => {\n            this.pos.x += changeX * p;\n            this.pos.y += changeY * p;\n            return this.running;\n        }, () => {\n            this.pos.x = startPos.x + p.x;\n            this.pos.y = startPos.y + p.y;\n        }, t, f);\n    }\n}\nexport class Color {\n    r;\n    g;\n    b;\n    a;\n    constructor(r, g, b, a = 1) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    clone() {\n        return new Color(this.r, this.g, this.b, this.a);\n    }\n    compToHex(c) {\n        const hex = Math.round(c).toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n    toHex() {\n        return ('#' +\n            this.compToHex(this.r) +\n            this.compToHex(this.g) +\n            this.compToHex(this.b) +\n            this.compToHex(this.a * 255));\n    }\n}\n// extend SimulationElement so it can be added to the\n// Simulation scene\nexport class SceneCollection extends SimulationElement {\n    name;\n    scene;\n    _isSceneCollection = true;\n    camera;\n    displaySurface;\n    ratio;\n    lightSources;\n    ambientLighting;\n    planesSortFunc;\n    constructor(name = '') {\n        super(new Vector(0, 0));\n        this.name = name;\n        this.scene = [];\n        this.camera = new Camera(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n        this.displaySurface = new Vector3(0, 0, 0);\n        this.ratio = 1;\n        this.lightSources = [];\n        this.ambientLighting = 0;\n        this.planesSortFunc = sortPlanes;\n    }\n    setSortFunc(func) {\n        this.planesSortFunc = func;\n        this.scene.forEach((element) => {\n            if (element._isSceneCollection) {\n                element.setSortFunc(func);\n            }\n        });\n    }\n    set3dObjects(cam, displaySurface, ratio) {\n        this.camera = cam;\n        this.displaySurface = displaySurface;\n        this.ratio = ratio;\n    }\n    setAmbientLighting(val) {\n        this.ambientLighting = val;\n        this.scene.forEach((obj) => {\n            if (obj._isSceneCollection) {\n                obj.setAmbientLighting(this.ambientLighting);\n            }\n        });\n    }\n    end() {\n        super.end();\n        this.scene.forEach((item) => item.end());\n    }\n    setPixelRatio(num) {\n        this.ratio = num;\n    }\n    add(element, id = null) {\n        if (id !== null) {\n            element.setId(id);\n        }\n        if (element._isSceneCollection) {\n            element.set3dObjects(this.camera, this.displaySurface, this.ratio);\n            element.setSortFunc(this.planesSortFunc);\n        }\n        this.scene.push(element);\n    }\n    updateSceneLightSources() {\n        this.scene.forEach((obj) => {\n            if (obj._isSceneCollection) {\n                obj.setLightSources(this.lightSources);\n            }\n        });\n    }\n    setLightSources(sources) {\n        this.lightSources = sources;\n        this.updateSceneLightSources();\n    }\n    addLightSource(source) {\n        this.lightSources.push(source);\n        this.updateSceneLightSources();\n    }\n    removeLightSourceWithId(id) {\n        this.lightSources = this.lightSources.filter((source) => source.id !== id);\n        this.updateSceneLightSources();\n    }\n    getLightSourceWithId(id) {\n        for (let i = 0; i < this.lightSources.length; i++) {\n            if (this.lightSources[i].id === id)\n                return this.lightSources[i];\n        }\n        return null;\n    }\n    removeWithId(id) {\n        this.scene = this.scene.filter((item) => item.id !== id);\n    }\n    removeWithObject(element) {\n        this.scene = this.scene.filter((item) => item === element);\n    }\n    draw(c) {\n        let planes = [];\n        for (const element of this.scene) {\n            if (element._3d) {\n                if (element.type === 'plane') {\n                    planes.push(element);\n                }\n                else {\n                    element.draw(c, this.camera, this.displaySurface, this.ratio, this.lightSources, this.ambientLighting);\n                }\n            }\n            else {\n                element.draw(c);\n            }\n        }\n        planes = this.planesSortFunc(planes, this.camera);\n        planes.forEach((plane) => {\n            plane.draw(c, this.camera, this.displaySurface, this.ratio, this.lightSources, this.ambientLighting);\n        });\n    }\n    empty() {\n        this.scene = [];\n    }\n}\nexport class SimulationElement3d {\n    pos;\n    color;\n    type;\n    running;\n    _3d = true;\n    id;\n    lighting;\n    constructor(pos, color = new Color(0, 0, 0), lighting = false, type = null, id = '') {\n        this.pos = pos;\n        this.color = color;\n        this.type = type;\n        this.running = true;\n        this.id = id;\n        this.lighting = lighting;\n    }\n    setLighting(val) {\n        this.lighting = val;\n    }\n    setId(id) {\n        this.id = id;\n    }\n    end() {\n        this.running = false;\n    }\n    draw(_ctx, _camera, _displaySurface, _ratio, _lightSources, _ambientLighting) { }\n    fill(color, t = 0, f) {\n        const currentColor = new Color(this.color.r, this.color.g, this.color.b);\n        const colorClone = color.clone();\n        const changeR = colorClone.r - this.color.r;\n        const changeG = colorClone.g - this.color.g;\n        const changeB = colorClone.b - this.color.b;\n        const func = () => {\n            this.color = colorClone;\n        };\n        return transitionValues(func, (p) => {\n            currentColor.r += changeR * p;\n            currentColor.g += changeG * p;\n            currentColor.b += changeB * p;\n            this.color.r = currentColor.r;\n            this.color.g = currentColor.g;\n            this.color.b = currentColor.b;\n            return this.running;\n        }, func, t, f);\n    }\n    moveTo(p, t = 0, f) {\n        const changeX = p.x - this.pos.x;\n        const changeY = p.y - this.pos.y;\n        const changeZ = p.z - this.pos.z;\n        return transitionValues(() => {\n            this.pos = p;\n        }, (p) => {\n            this.pos.x += changeX * p;\n            this.pos.y += changeY * p;\n            this.pos.z += changeZ * p;\n            return this.running;\n        }, () => {\n            this.pos.x = p.x;\n            this.pos.y = p.y;\n            this.pos.z = p.z;\n        }, t, f);\n    }\n    move(p, t = 0, f) {\n        const changeX = p.x;\n        const changeY = p.y;\n        const changeZ = p.z;\n        const startPos = new Vector3(this.pos.x, this.pos.y, this.pos.z);\n        return transitionValues(() => {\n            this.pos.x += p.x;\n            this.pos.y += p.y;\n            this.pos.z += p.z;\n        }, (p) => {\n            this.pos.x += changeX * p;\n            this.pos.y += changeY * p;\n            this.pos.z += changeZ * p;\n            return this.running;\n        }, () => {\n            this.pos.x = startPos.x + p.x;\n            this.pos.y = startPos.y + p.y;\n            this.pos.z = startPos.z + p.z;\n        }, t, f);\n    }\n}\nexport class Line extends SimulationElement {\n    startPoint;\n    endPoint;\n    thickness;\n    constructor(p1, p2, color = new Color(0, 0, 0), thickness = 1) {\n        super(new Vector(0, 0), color, 'line');\n        this.startPoint = p1;\n        this.endPoint = p2;\n        this.thickness = thickness;\n    }\n    clone() {\n        return new Line(this.startPoint.clone(), this.endPoint.clone(), this.color.clone(), this.thickness);\n    }\n    setStart(p, t = 0, f) {\n        const xChange = p.x - this.startPoint.x;\n        const yChange = p.y - this.startPoint.y;\n        return transitionValues(() => {\n            this.startPoint = p;\n        }, (p) => {\n            this.startPoint.x += xChange * p;\n            this.startPoint.y += yChange * p;\n            return this.running;\n        }, () => {\n            this.startPoint = p;\n        }, t, f);\n    }\n    setEnd(p, t = 0, f) {\n        const xChange = p.x - this.endPoint.x;\n        const yChange = p.y - this.endPoint.y;\n        return transitionValues(() => {\n            this.endPoint = p;\n        }, (p) => {\n            this.endPoint.x += xChange * p;\n            this.endPoint.y += yChange * p;\n            return this.running;\n        }, () => {\n            this.endPoint = p;\n        }, t, f);\n    }\n    moveTo(p, t = 0) {\n        return new Promise(async (resolve) => {\n            await Promise.all([this.setStart(p, t), this.setEnd(this.endPoint.clone().add(p), t)]);\n            resolve();\n        });\n    }\n    move(v, t = 0) {\n        return this.moveTo(this.startPoint.clone().add(v), t);\n    }\n    draw(c) {\n        c.beginPath();\n        c.lineWidth = this.thickness;\n        c.strokeStyle = this.color.toHex();\n        c.moveTo(this.startPoint.x, this.startPoint.y);\n        c.lineTo(this.endPoint.x, this.endPoint.y);\n        c.stroke();\n        c.closePath();\n    }\n}\nexport class Circle extends SimulationElement {\n    radius;\n    startAngle;\n    endAngle;\n    counterClockwise;\n    thickness;\n    rotation;\n    fillCircle;\n    constructor(pos, radius, color = new Color(0, 0, 0), startAngle = 0, endAngle = 360, thickness = 1, rotation = 0, fill = true, counterClockwise = false) {\n        super(pos, color, 'circle');\n        this.radius = radius;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n        this.counterClockwise = counterClockwise;\n        this.thickness = thickness;\n        this.rotation = rotation;\n        this.fillCircle = fill;\n    }\n    setCounterClockwise(val) {\n        this.counterClockwise = val;\n    }\n    setFillCircle(val) {\n        this.fillCircle = val;\n    }\n    draw(c) {\n        c.beginPath();\n        c.strokeStyle = this.color.toHex();\n        c.fillStyle = this.color.toHex();\n        c.lineWidth = this.thickness;\n        c.arc(this.pos.x, this.pos.y, this.radius, degToRad(this.startAngle + this.rotation), degToRad(this.endAngle + this.rotation), this.counterClockwise);\n        if (this.endAngle > 0 && this.startAngle + 360 > this.endAngle) {\n            c.lineTo(this.pos.x, this.pos.y);\n            c.moveTo(this.pos.x, this.pos.y);\n            c.lineTo(this.pos.x + Math.cos(degToRad(this.rotation)) * this.radius, this.pos.y + Math.sin(degToRad(this.rotation)) * this.radius);\n        }\n        c.stroke();\n        if (this.fillCircle) {\n            c.fill();\n        }\n        c.closePath();\n    }\n    contains(p) {\n        return distance(p, this.pos) < this.radius;\n    }\n    scaleRadius(scale, t = 0, f) {\n        const initialRadius = this.radius;\n        const scaleChange = this.radius * scale - this.radius;\n        return transitionValues(() => {\n            this.radius *= scale;\n        }, (p) => {\n            this.radius += scaleChange * p;\n            this.radius = Math.max(0, this.radius);\n            return this.running;\n        }, () => {\n            this.radius = initialRadius * scale;\n        }, t, f);\n    }\n    setRadius(value, t = 0, f) {\n        const radChange = value - this.radius;\n        return transitionValues(() => {\n            this.radius = value;\n        }, (p) => {\n            this.radius += radChange * p;\n            this.radius = Math.max(0, this.radius);\n            return this.running;\n        }, () => {\n            this.radius = value;\n        }, t, f);\n    }\n    setThickness(val, t = 0, f) {\n        const thicknessChange = val - this.thickness;\n        return transitionValues(() => {\n            this.thickness = val;\n        }, (p) => {\n            this.thickness += thicknessChange * p;\n            return this.running;\n        }, () => {\n            this.thickness = val;\n        }, t, f);\n    }\n    setStartAngle(angle, t = 0, f) {\n        const angleChange = angle - this.startAngle;\n        return transitionValues(() => {\n            this.startAngle = angle;\n        }, (p) => {\n            this.startAngle += angleChange * p;\n            return this.running;\n        }, () => {\n            this.startAngle = angle;\n        }, t, f);\n    }\n    setEndAngle(angle, t = 0, f) {\n        const angleChange = angle - this.endAngle;\n        return transitionValues(() => {\n            this.endAngle = angle;\n        }, (p) => {\n            this.endAngle += angleChange * p;\n            return this.running;\n        }, () => {\n            this.endAngle = angle;\n        }, t, f);\n    }\n    rotate(amount, t = 0, f) {\n        const initialRotation = this.rotation;\n        const rotationChange = this.rotation + amount - this.rotation;\n        return transitionValues(() => {\n            this.rotation += amount;\n        }, (p) => {\n            this.rotation += rotationChange * p;\n            return this.running;\n        }, () => {\n            this.rotation = initialRotation + amount;\n        }, t, f);\n    }\n    rotateTo(deg, t = 0, f) {\n        const rotationChange = deg - this.rotation;\n        return transitionValues(() => {\n            this.rotation = deg;\n        }, (p) => {\n            this.rotation += rotationChange * p;\n            return this.running;\n        }, () => {\n            this.rotation = deg;\n        }, t, f);\n    }\n    clone() {\n        return new Circle(this.pos.clone(), this.radius, this.color.clone(), this.startAngle, this.endAngle, this.thickness, this.rotation, this.counterClockwise);\n    }\n}\nexport class Polygon extends SimulationElement {\n    offsetPoint;\n    points;\n    rotation;\n    constructor(pos, points, color = new Color(0, 0, 0), r = 0, offsetPoint = new Vector(0, 0)) {\n        super(pos, color, 'polygon');\n        this.offsetPoint = offsetPoint;\n        this.points = points.map((p) => {\n            return new Vector(p.x + this.offsetPoint.x, p.y + this.offsetPoint.y);\n        });\n        this.rotation = r;\n    }\n    setPoints(points, t = 0, f) {\n        const lastPoint = this.points.length > 0 ? this.points[this.points.length - 1] : new Vector(0, 0);\n        if (points.length > this.points.length) {\n            while (points.length > this.points.length) {\n                this.points.push(new Vector(lastPoint.x, lastPoint.y));\n            }\n        }\n        const initial = this.points.map((p) => p.clone());\n        const changes = [\n            ...points.map((p, i) => p.clone().sub(this.points[i])),\n            ...this.points\n                .slice(points.length, this.points.length)\n                .map((point) => (points[points.length - 1] || new Vector(0, 0)).clone().sub(point))\n        ];\n        return transitionValues(() => {\n            this.points = points.map((p) => new Vector(p.x + this.offsetPoint.x, p.y + this.offsetPoint.y));\n        }, (p) => {\n            this.points = this.points.map((point, i) => {\n                point.x += (changes[i]?.x || 0) * p;\n                point.y += (changes[i]?.y || 0) * p;\n                return point;\n            });\n            return this.running;\n        }, () => {\n            this.points = initial.map((p, i) => {\n                p.x += changes[i].x;\n                p.y += changes[i].y;\n                return p.clone();\n            });\n            this.points.splice(points.length, this.points.length);\n        }, t, f);\n    }\n    clone() {\n        return new Polygon(this.pos.clone(), [...this.points.map((p) => p.clone())], this.color.clone(), this.rotation, this.offsetPoint.clone());\n    }\n    rotate(deg, t = 0, f) {\n        const newRotation = this.rotation + deg;\n        return transitionValues(() => {\n            this.rotation = newRotation;\n        }, (p) => {\n            this.rotation += deg * p;\n            return this.running;\n        }, () => {\n            this.rotation = newRotation;\n        }, t, f);\n    }\n    rotateTo(deg, t = 0, f) {\n        const rotationChange = deg - this.rotation;\n        return transitionValues(() => {\n            this.rotation = deg;\n        }, (p) => {\n            this.rotation += rotationChange * p;\n            return this.running;\n        }, () => {\n            this.rotation = deg;\n        }, t, f);\n    }\n    draw(c) {\n        const points = this.points.map((p) => p.clone().rotate(this.rotation));\n        c.beginPath();\n        c.fillStyle = this.color.toHex();\n        if (points.length > 0) {\n            c.moveTo(points[0].x + this.pos.x, points[0].y + this.pos.y);\n            for (let i = 1; i < points.length; i++) {\n                c.lineTo(points[i].x + this.pos.x, points[i].y + this.pos.y);\n            }\n        }\n        c.fill();\n        c.closePath();\n    }\n}\nexport class Plane extends SimulationElement3d {\n    points;\n    wireframe;\n    fillPlane;\n    constructor(pos, points, color = new Color(0, 0, 0), fill = true, wireframe = false, lighting = false) {\n        super(pos, color, lighting, 'plane');\n        this.points = points;\n        this.fillPlane = fill;\n        this.wireframe = wireframe;\n    }\n    clone() {\n        return new Plane(this.pos.clone(), this.points.map((p) => p.clone()), this.color.clone(), this.fillPlane, this.wireframe);\n    }\n    setPoints(points, t = 0, f) {\n        const lastPoint = this.points.length > 0 ? this.points[this.points.length - 1] : new Vector3(0, 0, 0);\n        if (points.length > this.points.length) {\n            while (points.length > this.points.length) {\n                this.points.push(new Vector3(lastPoint.x, lastPoint.y, lastPoint.z));\n            }\n        }\n        const initial = this.points.map((p) => p.clone());\n        const changes = [\n            ...points.map((p, i) => p.clone().sub(this.points[i])),\n            ...this.points\n                .slice(points.length, this.points.length)\n                .map((point) => (points[points.length - 1] || new Vector3(0, 0, 0)).clone().sub(point))\n        ];\n        return transitionValues(() => {\n            this.points = points.map((p) => new Vector3(p.x, p.y, p.z));\n        }, (p) => {\n            this.points = this.points.map((point, i) => {\n                point.x += (changes[i]?.x || 0) * p;\n                point.y += (changes[i]?.y || 0) * p;\n                point.z += (changes[i]?.z || 0) * p;\n                return point;\n            });\n            return this.running;\n        }, () => {\n            this.points = initial.map((p, i) => {\n                p.x += changes[i].x;\n                p.y += changes[i].y;\n                p.z += changes[i].z;\n                return p.clone();\n            });\n            this.points.splice(points.length, this.points.length);\n        }, t, f);\n    }\n    draw(c, camera, displaySurface, ratio, lightSources, ambientLighting) {\n        let dampen = 0;\n        const maxDampen = 2;\n        if (this.lighting) {\n            for (let i = 0; i < lightSources.length; i++) {\n                const center = this.getCenter();\n                const normals = this.getNormals();\n                let normal;\n                if (angleBetweenVector3(camera.pos.clone().sub(center), normals[0]) > 90) {\n                    normal = normals[1];\n                }\n                else {\n                    normal = normals[0];\n                }\n                const vec = new Vector3(lightSources[i].pos.x, lightSources[i].pos.y, lightSources[i].pos.z);\n                const angle = angleBetweenVector3(normal, vec);\n                dampen += Math.max(ambientLighting, Math.sqrt(Math.max(0, 90 - Math.abs(angle)) / 90) * lightSources[i].intensity);\n                dampen = Math.min(dampen, maxDampen);\n            }\n        }\n        c.beginPath();\n        c.strokeStyle = '#000000';\n        const tempColor = this.color.clone();\n        if (this.lighting) {\n            tempColor.r *= dampen;\n            tempColor.g *= dampen;\n            tempColor.b *= dampen;\n            tempColor.r = clamp(tempColor.r, 0, 255);\n            tempColor.g = clamp(tempColor.g, 0, 255);\n            tempColor.b = clamp(tempColor.b, 0, 255);\n        }\n        c.fillStyle = tempColor.toHex();\n        c.lineWidth = 2;\n        for (let i = 0; i < this.points.length; i++) {\n            let p1;\n            let p2;\n            if (i === this.points.length - 1) {\n                p1 = projectPoint(this.points[i].clone().add(this.pos), camera, displaySurface);\n                p2 = projectPoint(this.points[0].clone().add(this.pos), camera, displaySurface);\n                // p1 = projectPoint(this.points[i], camera, displaySurface);\n                // p2 = projectPoint(this.points[0], camera, displaySurface);\n            }\n            else {\n                p1 = projectPoint(this.points[i].clone().add(this.pos), camera, displaySurface);\n                p2 = projectPoint(this.points[i + 1].clone().add(this.pos), camera, displaySurface);\n                // p1 = projectPoint(this.points[i], camera, displaySurface);\n                // p2 = projectPoint(this.points[i + 1], camera, displaySurface);\n            }\n            if (!p1.behindCamera && !p2.behindCamera) {\n                if (i === 0) {\n                    c.moveTo(p1.point.x * ratio, p1.point.y * ratio);\n                }\n                c.lineTo(p2.point.x * ratio, p2.point.y * ratio);\n            }\n        }\n        if (this.wireframe)\n            c.stroke();\n        if (this.fillPlane)\n            c.fill();\n        c.closePath();\n    }\n    getNormals() {\n        if (this.points.length >= 3) {\n            const vec1 = this.points[0].clone().sub(this.points[1]);\n            const vec2 = this.points[1].clone().sub(this.points[2]);\n            const res = vec1.cross(vec2).normalize();\n            return [res, res.clone().multiply(-1)];\n        }\n        return [new Vector3(0, 0, 0), new Vector3(0, 0, 0)];\n    }\n    getCenter() {\n        const avgVec = this.points.reduce((acc, curr) => acc.add(curr), new Vector3(0, 0, 0));\n        avgVec.divide(this.points.length);\n        return avgVec;\n    }\n}\nexport class Cube extends SimulationElement3d {\n    width;\n    height;\n    depth;\n    planes = [];\n    points = [];\n    rotation;\n    fillCube;\n    wireframe;\n    constructor(pos, width, height, depth, color = new Color(0, 0, 0), rotation = new Vector3(0, 0, 0), fill = true, wireframe = false, lighting = false) {\n        super(pos, color, lighting, 'cube');\n        this.width = width / window.devicePixelRatio;\n        this.height = height / window.devicePixelRatio;\n        this.depth = depth / window.devicePixelRatio;\n        this.wireframe = wireframe;\n        this.fillCube = fill;\n        this.rotation = rotation;\n        this.generatePoints();\n        this.generatePlanes();\n    }\n    generatePoints() {\n        this.points = [\n            new Vector3(-this.width / 2, -this.height / 2, -this.depth / 2),\n            new Vector3(this.width / 2, -this.height / 2, -this.depth / 2),\n            new Vector3(this.width / 2, this.height / 2, -this.depth / 2),\n            new Vector3(-this.width / 2, this.height / 2, -this.depth / 2),\n            new Vector3(-this.width / 2, -this.height / 2, this.depth / 2),\n            new Vector3(this.width / 2, -this.height / 2, this.depth / 2),\n            new Vector3(this.width / 2, this.height / 2, this.depth / 2),\n            new Vector3(-this.width / 2, this.height / 2, this.depth / 2)\n        ];\n    }\n    generatePlanes() {\n        const points = this.points.map((p) => p.clone().rotate(this.rotation).add(this.pos));\n        this.planes = [\n            new Plane(this.pos, [points[0], points[1], points[2], points[3]], this.color, this.fillCube, this.wireframe, this.lighting),\n            new Plane(this.pos, [points[0], points[1], points[5], points[4]], this.color, this.fillCube, this.wireframe, this.lighting),\n            new Plane(this.pos, [points[4], points[5], points[6], points[7]], this.color, this.fillCube, this.wireframe, this.lighting),\n            new Plane(this.pos, [points[3], points[2], points[6], points[7]], this.color, this.fillCube, this.wireframe, this.lighting),\n            new Plane(this.pos, [points[0], points[3], points[7], points[4]], this.color, this.fillCube, this.wireframe, this.lighting),\n            new Plane(this.pos, [points[2], points[1], points[5], points[6]], this.color, this.fillCube, this.wireframe, this.lighting)\n        ];\n    }\n    updatePoints() {\n        const newPointValues = [\n            [-this.width / 2, -this.height / 2, -this.depth / 2],\n            [this.width / 2, -this.height / 2, -this.depth / 2],\n            [this.width / 2, this.height / 2, -this.depth / 2],\n            [-this.width / 2, this.height / 2, -this.depth / 2],\n            [-this.width / 2, -this.height / 2, this.depth / 2],\n            [this.width / 2, -this.height / 2, this.depth / 2],\n            [this.width / 2, this.height / 2, this.depth / 2],\n            [-this.width / 2, this.height / 2, this.depth / 2]\n        ];\n        newPointValues.forEach((val, i) => {\n            this.points[i].x = val[0];\n            this.points[i].y = val[1];\n            this.points[i].z = val[2];\n        });\n    }\n    updatePlanes() {\n        const points = this.points.map((p) => p.clone().rotate(this.rotation));\n        const pointsArr = [\n            [points[0], points[1], points[2], points[3]],\n            [points[0], points[1], points[5], points[4]],\n            [points[4], points[5], points[6], points[7]],\n            [points[3], points[2], points[6], points[7]],\n            [points[0], points[3], points[7], points[4]],\n            [points[2], points[1], points[5], points[6]]\n        ];\n        this.planes.forEach((plane, index) => {\n            plane.setPoints(pointsArr[index]);\n        });\n    }\n    rotate(amount, t = 0, f) {\n        const initial = this.rotation.clone();\n        return transitionValues(() => {\n            this.rotation.x = initial.x + amount.x;\n            this.rotation.y = initial.y + amount.y;\n            this.rotation.z = initial.z + amount.z;\n        }, (p) => {\n            this.rotation.x += amount.x * p;\n            this.rotation.y += amount.y * p;\n            this.rotation.z += amount.z * p;\n            return this.running;\n        }, () => {\n            this.rotation.x = initial.x + amount.x;\n            this.rotation.y = initial.y + amount.y;\n            this.rotation.z = initial.z + amount.z;\n        }, t, f);\n    }\n    rotateTo(amount, t = 0, f) {\n        const changeX = amount.x - this.rotation.x;\n        const changeY = amount.y - this.rotation.y;\n        const changeZ = amount.z - this.rotation.z;\n        return transitionValues(() => {\n            this.rotation.x = amount.x;\n            this.rotation.y = amount.y;\n            this.rotation.z = amount.z;\n        }, (p) => {\n            this.rotation.x += changeX * p;\n            this.rotation.y += changeY * p;\n            this.rotation.z += changeZ * p;\n            return this.running;\n        }, () => {\n            this.rotation.x = amount.x;\n            this.rotation.y = amount.y;\n            this.rotation.z = amount.z;\n        }, t, f);\n    }\n    setHeight(amount, t = 0, f) {\n        const heightChange = amount - this.height;\n        return transitionValues(() => {\n            this.height = amount;\n            this.updatePoints();\n        }, (p) => {\n            this.height += heightChange * p;\n            this.updatePoints();\n            return this.running;\n        }, () => {\n            this.height = amount;\n            this.updatePoints();\n        }, t, f);\n    }\n    setDepth(amount, t = 0, f) {\n        const depthChange = amount - this.depth;\n        return transitionValues(() => {\n            this.depth = amount;\n            this.updatePoints();\n        }, (p) => {\n            this.depth += depthChange * p;\n            this.updatePoints();\n            return this.running;\n        }, () => {\n            this.depth = amount;\n            this.updatePoints();\n        }, t, f);\n    }\n    setWidth(amount, t = 0, f) {\n        const widthChange = amount - this.width;\n        return transitionValues(() => {\n            this.width = amount;\n            this.updatePoints();\n        }, (p) => {\n            this.width += widthChange * p;\n            this.updatePoints();\n            return this.running;\n        }, () => {\n            this.width = amount;\n            this.updatePoints();\n        }, t, f);\n    }\n    scaleHeight(amount, t = 0, f) {\n        const height = this.height * amount;\n        return this.setHeight(height, t, f);\n    }\n    scaleWidth(amount, t = 0, f) {\n        const width = this.width * amount;\n        return this.setWidth(width, t, f);\n    }\n    scaleDepth(amount, t = 0, f) {\n        const depth = this.depth * amount;\n        return this.setDepth(depth, t, f);\n    }\n    draw(c, camera, displaySurface, _ratio, lightSources, ambientLighting) {\n        this.planes.forEach((plane) => {\n            plane.color = this.color;\n        });\n        this.updatePlanes();\n        this.planes = sortPlanes(this.planes, camera);\n        for (let i = 0; i < this.planes.length; i++) {\n            this.planes[i].draw(c, camera, displaySurface, _ratio, lightSources, ambientLighting);\n        }\n    }\n}\nexport class Square extends SimulationElement {\n    width;\n    height;\n    rotation;\n    showNodeVectors;\n    hovering;\n    offsetPoint;\n    topLeft;\n    topRight;\n    bottomLeft;\n    bottomRight;\n    constructor(pos, width, height, color = new Color(0, 0, 0), offsetPoint = new Vector(0, 0), rotation = 0) {\n        super(pos, color, 'square');\n        this.width = width;\n        this.height = height;\n        this.rotation = rotation;\n        this.showNodeVectors = false;\n        this.hovering = false;\n        this.topLeft = new Vector(0, 0);\n        this.topRight = new Vector(0, 0);\n        this.bottomLeft = new Vector(0, 0);\n        this.bottomRight = new Vector(0, 0);\n        this.offsetPoint = offsetPoint;\n        this.updateOffsetPosition(offsetPoint);\n    }\n    generateVectors() {\n        this.topLeft = new Vector(-this.width / 2 - this.offsetPoint.x, -this.height / 2 - this.offsetPoint.y);\n        this.topRight = new Vector(this.width / 2 - this.offsetPoint.x, -this.height / 2 - this.offsetPoint.y);\n        this.bottomLeft = new Vector(-this.width / 2 - this.offsetPoint.x, this.height / 2 - this.offsetPoint.y);\n        this.bottomRight = new Vector(this.width / 2 - this.offsetPoint.x, this.height / 2 - this.offsetPoint.y);\n    }\n    updateOffsetPosition(p) {\n        this.offsetPoint = p.clone();\n        this.generateVectors();\n    }\n    setNodeVectors(show) {\n        this.showNodeVectors = show;\n    }\n    rotate(deg, t = 0, f) {\n        const initial = this.rotation;\n        return transitionValues(() => {\n            this.rotation = initial + deg;\n        }, (p) => {\n            this.rotation += deg * p;\n            return this.running;\n        }, () => {\n            this.rotation = initial + deg;\n        }, t, f);\n    }\n    rotateTo(deg, t = 0, f) {\n        const rotationChange = deg - this.rotation;\n        return transitionValues(() => {\n            this.rotation = deg;\n        }, (p) => {\n            this.rotation += rotationChange * p;\n            return this.running;\n        }, () => {\n            this.rotation = deg;\n        }, t, f);\n    }\n    draw(c) {\n        this.generateVectors();\n        const topRight = this.topRight.clone().rotate(this.rotation);\n        const topLeft = this.topLeft.clone().rotate(this.rotation);\n        const bottomRight = this.bottomRight.clone().rotate(this.rotation);\n        const bottomLeft = this.bottomLeft.clone().rotate(this.rotation);\n        c.beginPath();\n        c.fillStyle = this.color.toHex();\n        c.moveTo(this.pos.x + topLeft.x + this.offsetPoint.x, this.pos.y + topLeft.y + this.offsetPoint.y);\n        c.lineTo(this.pos.x + topRight.x + this.offsetPoint.x, this.pos.y + topRight.y + this.offsetPoint.y);\n        c.lineTo(this.pos.x + bottomRight.x + this.offsetPoint.x, this.pos.y + bottomRight.y + this.offsetPoint.y);\n        c.lineTo(this.pos.x + bottomLeft.x + this.offsetPoint.x, this.pos.y + bottomLeft.y + this.offsetPoint.y);\n        c.fill();\n        c.closePath();\n        if (this.showNodeVectors) {\n            this.topLeft.draw(c, new Vector(this.pos.x + this.offsetPoint.x, this.pos.y + this.offsetPoint.y));\n            this.topRight.draw(c, new Vector(this.pos.x + this.offsetPoint.x, this.pos.y + this.offsetPoint.y));\n            this.bottomLeft.draw(c, new Vector(this.pos.x + this.offsetPoint.x, this.pos.y + this.offsetPoint.y));\n            this.bottomRight.draw(c, new Vector(this.pos.x + this.offsetPoint.x, this.pos.y + this.offsetPoint.y));\n        }\n    }\n    scale(value, t = 0, f) {\n        return new Promise(async (resolve) => {\n            await Promise.all([this.scaleWidth(value, t, f), this.scaleHeight(value, t, f)]);\n            resolve();\n        });\n    }\n    scaleWidth(value, t = 0, f) {\n        const width = this.width * value;\n        return this.setWidth(width, t, f);\n    }\n    scaleHeight(value, t = 0, f) {\n        const height = this.height * value;\n        return this.setHeight(height, t, f);\n    }\n    setWidth(value, t = 0, f) {\n        const initial = this.width;\n        const change = value - initial;\n        return transitionValues(() => {\n            this.width = value;\n        }, (p) => {\n            this.width += change * p;\n            return this.running;\n        }, () => {\n            this.width = value;\n        }, t, f);\n    }\n    setHeight(value, t = 0, f) {\n        const initial = this.height;\n        const change = value - initial;\n        return transitionValues(() => {\n            this.height = value;\n        }, (p) => {\n            this.height += change * p;\n            return this.running;\n        }, () => {\n            this.height = value;\n        }, t, f);\n    }\n    contains(p) {\n        const topLeftVector = this.topLeft.clone();\n        const topRightVector = this.topRight.clone();\n        const bottomLeftVector = this.bottomLeft.clone();\n        const cursorVector = new Vector(p.x - this.pos.x - this.offsetPoint.x, p.y - this.pos.y - this.offsetPoint.y);\n        cursorVector.rotate(-this.rotation);\n        if (cursorVector.x > bottomLeftVector.x &&\n            cursorVector.x < topRightVector.x &&\n            cursorVector.y > topLeftVector.y &&\n            cursorVector.y < bottomLeftVector.y) {\n            return true;\n        }\n        return false;\n    }\n    clone() {\n        return new Square(this.pos.clone(), this.width, this.height, this.color.clone(), this.offsetPoint.clone(), this.rotation);\n    }\n}\nclass Event {\n    event;\n    callback;\n    constructor(event, callback) {\n        this.event = event;\n        this.callback = callback;\n    }\n}\nexport class Line3d extends SimulationElement3d {\n    p1;\n    p2;\n    thickness;\n    constructor(p1, p2, color = new Color(0, 0, 0), thickness = 1, lighting = false, id = '') {\n        super(p1, color, lighting, 'line', id);\n        this.p1 = p1;\n        this.p2 = p2;\n        this.thickness = thickness;\n    }\n    draw(ctx, camera, displaySurface, ratio) {\n        const p1 = projectPoint(this.p1, camera, displaySurface);\n        const p2 = projectPoint(this.p2, camera, displaySurface);\n        if (!p1.behindCamera && !p2.behindCamera) {\n            ctx.beginPath();\n            ctx.lineWidth = this.thickness;\n            ctx.strokeStyle = this.color.toHex();\n            ctx.moveTo(p1.point.x * ratio, p1.point.y * ratio);\n            ctx.lineTo(p2.point.x * ratio, p2.point.y * ratio);\n            ctx.stroke();\n            ctx.closePath();\n        }\n    }\n}\nexport class Simulation {\n    scene;\n    fitting;\n    bgColor;\n    canvas = null;\n    width = 0;\n    height = 0;\n    ratio;\n    running;\n    _prevReq;\n    events;\n    ctx = null;\n    camera;\n    center;\n    displaySurface;\n    forward = new Vector3(0, 0, 1);\n    backward = new Vector3(0, 0, -1);\n    left = new Vector3(-1, 0, 0);\n    right = new Vector3(1, 0, 0);\n    up = new Vector3(0, -1, 0);\n    down = new Vector3(0, 1, 0);\n    lightSources;\n    ambientLighting;\n    planesSortFunc;\n    constructor(el, cameraPos = new Vector3(0, 0, -200), cameraRot = new Vector3(0, 0, 0), displaySurfaceDepth, center = new Vector(0, 0), displaySurfaceSize) {\n        this.scene = [];\n        this.fitting = false;\n        this.bgColor = new Color(255, 255, 255);\n        this.running = true;\n        this._prevReq = 0;\n        this.events = [];\n        this.camera = new Camera(cameraPos, cameraRot);\n        this.center = center;\n        this.displaySurface = new Vector3(0, 0, 0);\n        this.ratio = window.devicePixelRatio;\n        this.lightSources = [];\n        this.ambientLighting = 0.25;\n        this.planesSortFunc = sortPlanes;\n        this.setDirections();\n        const defaultDepth = 2000;\n        this.canvas = typeof el === 'string' ? document.getElementById(el) : el;\n        if (!this.canvas) {\n            console.error(`Canvas with id \"${el}\" not found`);\n            return;\n        }\n        window.addEventListener('resize', () => this.resizeCanvas(this.canvas));\n        this.resizeCanvas(this.canvas);\n        if (displaySurfaceSize) {\n            this.displaySurface = new Vector3(displaySurfaceSize.x, displaySurfaceSize.y, displaySurfaceDepth || defaultDepth);\n        }\n        else {\n            this.displaySurface = new Vector3(this.width / 2, this.height / 2, displaySurfaceDepth || defaultDepth);\n        }\n        const ctx = this.canvas.getContext('2d');\n        if (!ctx)\n            return;\n        this.ctx = ctx;\n        this.render(ctx);\n    }\n    setSortFunc(func) {\n        this.planesSortFunc = func;\n        this.scene.forEach((element) => {\n            if (element._isSceneCollection) {\n                element.setSortFunc(func);\n            }\n        });\n    }\n    updateSceneLightSources() {\n        this.scene.forEach((obj) => {\n            if (obj._isSceneCollection) {\n                obj.setLightSources(this.lightSources);\n            }\n        });\n    }\n    setLightSources(sources) {\n        this.lightSources = sources;\n        this.updateSceneLightSources();\n    }\n    addLightSource(source) {\n        this.lightSources.push(source);\n        this.updateSceneLightSources();\n    }\n    removeLightSourceWithId(id) {\n        this.lightSources = this.lightSources.filter((source) => source.id !== id);\n        this.updateSceneLightSources();\n    }\n    getLightSourceWithId(id) {\n        for (let i = 0; i < this.lightSources.length; i++) {\n            if (this.lightSources[i].id === id)\n                return this.lightSources[i];\n        }\n        return null;\n    }\n    setAmbientLighting(val) {\n        this.ambientLighting = val;\n        this.scene.forEach((obj) => {\n            if (obj._isSceneCollection) {\n                obj.setAmbientLighting(this.ambientLighting);\n            }\n        });\n    }\n    setDirections() {\n        const degRotation = vector3RadToDeg(new Vector3(this.camera.rot.x, this.camera.rot.y, this.camera.rot.z));\n        this.forward = new Vector3(0, 0, 1).rotate(degRotation);\n        this.backward = this.forward.clone().multiply(-1);\n        this.left = new Vector3(-1, 0, 0).rotate(degRotation);\n        this.right = this.left.clone().multiply(-1);\n    }\n    render(c) {\n        if (!this.canvas)\n            return;\n        c.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        c.beginPath();\n        c.fillStyle = this.bgColor.toHex();\n        c.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        c.closePath();\n        let planes = [];\n        this.scene.forEach((element) => {\n            if (element._3d) {\n                if (element.type === 'plane') {\n                    planes.push(element);\n                }\n                else {\n                    element.draw(c, this.camera, this.displaySurface, this.ratio, this.lightSources, this.ambientLighting);\n                }\n            }\n            else {\n                element.draw(c);\n            }\n        });\n        planes = this.planesSortFunc(planes, this.camera);\n        planes.forEach((plane) => {\n            plane.draw(c, this.camera, this.displaySurface, this.ratio, this.lightSources, this.ambientLighting);\n        });\n        if (this.running) {\n            this._prevReq = window.requestAnimationFrame(() => this.render(c));\n        }\n    }\n    end() {\n        this.running = false;\n        for (let i = 0; i < this.scene.length; i++) {\n            this.scene[i].end();\n        }\n        window.removeEventListener('resize', () => this.resizeCanvas(this.canvas));\n        window.cancelAnimationFrame(this._prevReq);\n    }\n    add(element, id = null) {\n        if (!this.canvas)\n            return;\n        if (id !== null) {\n            element.setId(id);\n        }\n        if (element._isSceneCollection) {\n            element.set3dObjects(this.camera, this.displaySurface, this.ratio);\n            element.setAmbientLighting(this.ambientLighting);\n            element.setSortFunc(this.planesSortFunc);\n        }\n        this.scene.push(element);\n    }\n    removeWithId(id) {\n        this.scene = this.scene.filter((item) => item.id !== id);\n    }\n    removeWithObject(element) {\n        this.scene = this.scene.filter((item) => item === element);\n    }\n    on(event, callback) {\n        if (!this.canvas)\n            return;\n        this.events.push(new Event(event, callback));\n        // @ts-ignore\n        this.canvas.addEventListener(event, callback);\n    }\n    removeListener(event, callback) {\n        this.events = this.events.filter((e) => {\n            if (e.event === event && e.callback == callback) {\n                if (this.canvas) {\n                    // @ts-ignore\n                    this.canvas.removeEventListener(e.event, e.callback);\n                }\n                return false;\n            }\n            return true;\n        });\n    }\n    fitElement() {\n        if (!this.canvas)\n            return;\n        this.fitting = true;\n        this.resizeCanvas(this.canvas);\n    }\n    setSize(x, y) {\n        if (!this.canvas)\n            return;\n        this.canvas.width = x * this.ratio;\n        this.canvas.height = y * this.ratio;\n        this.canvas.style.width = x + 'px';\n        this.canvas.style.height = y + 'px';\n        this.width = x;\n        this.height = y;\n        this.fitting = false;\n    }\n    setBgColor(color) {\n        this.bgColor = color.clone();\n    }\n    resizeCanvas(c) {\n        if (!c)\n            return;\n        if (!this.canvas)\n            return;\n        if (this.fitting) {\n            if (c.parentElement) {\n                const width = c.parentElement.clientWidth;\n                const height = c.parentElement.clientHeight;\n                this.width = width;\n                this.height = height;\n                this.canvas.width = width * this.ratio;\n                this.canvas.height = height * this.ratio;\n                this.canvas.style.width = width + 'px';\n                this.canvas.style.height = height + 'px';\n            }\n        }\n        this.displaySurface.x = this.width / 2;\n        this.displaySurface.y = this.height / 2;\n    }\n    empty() {\n        this.scene = [];\n    }\n    moveCamera(v, t = 0, f) {\n        const initial = this.camera.pos.clone();\n        return transitionValues(() => {\n            this.camera.pos.add(v);\n        }, (p) => {\n            this.camera.pos.x += v.x * p;\n            this.camera.pos.y += v.y * p;\n            this.camera.pos.z += v.z * p;\n            return this.running;\n        }, () => {\n            this.camera.pos = initial.add(v);\n        }, t, f);\n    }\n    moveCameraTo(v, t = 0, f) {\n        const changeX = v.x - this.camera.pos.x;\n        const changeY = v.y - this.camera.pos.y;\n        const changeZ = v.z - this.camera.pos.z;\n        return transitionValues(() => {\n            this.camera.pos = v.clone();\n        }, (p) => {\n            this.camera.pos.x += changeX * p;\n            this.camera.pos.y += changeY * p;\n            this.camera.pos.z += changeZ * p;\n            return this.running;\n        }, () => {\n            this.camera.pos = v.clone();\n        }, t, f);\n    }\n    rotateCamera(v, t = 0, f) {\n        const initial = this.camera.rot.clone();\n        return transitionValues(() => {\n            this.camera.rot.x = initial.x + degToRad(v.x);\n            this.camera.rot.y = initial.y + degToRad(v.y);\n            this.camera.rot.z = initial.z + degToRad(v.z);\n            this.setDirections();\n        }, (p) => {\n            this.camera.rot.x += degToRad(v.x) * p;\n            this.camera.rot.y += degToRad(v.y) * p;\n            this.camera.rot.z += degToRad(v.z) * p;\n            this.setDirections();\n            return this.running;\n        }, () => {\n            this.camera.rot.x = initial.x + degToRad(v.x);\n            this.camera.rot.y = initial.y + degToRad(v.y);\n            this.camera.rot.z = initial.z + degToRad(v.z);\n            this.setDirections();\n        }, t, f);\n    }\n    rotateCameraTo(v, t = 0, f) {\n        const changeX = degToRad(v.x) - this.camera.rot.x;\n        const changeY = degToRad(v.y) - this.camera.rot.y;\n        const changeZ = degToRad(v.z) - this.camera.rot.z;\n        return transitionValues(() => {\n            this.camera.rot = v.clone();\n            this.setDirections();\n        }, (p) => {\n            this.camera.rot.x += changeX * p;\n            this.camera.rot.y += changeY * p;\n            this.camera.rot.z += changeZ * p;\n            this.setDirections();\n            return this.running;\n        }, () => {\n            this.camera.rot = v.clone();\n            this.setDirections();\n        }, t, f);\n    }\n}\nexport function pythag(x, y) {\n    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\nexport function distance(p1, p2) {\n    return pythag(p1.x - p2.x, p1.y - p2.y);\n}\nexport function distance3d(vec1, vec2) {\n    return Math.sqrt(Math.pow(vec2.x - vec1.x, 2) + Math.pow(vec2.y - vec1.y, 2) + Math.pow(vec2.z - vec1.z, 2));\n}\nexport function degToRad(deg) {\n    return (deg * Math.PI) / 180;\n}\nexport function radToDeg(rad) {\n    return (rad * 180) / Math.PI;\n}\nexport function lerp(a, b, t) {\n    return a + (b - a) * t;\n}\nexport function smoothStep(t) {\n    const v1 = t * t;\n    const v2 = 1 - (1 - t) * (1 - t);\n    return lerp(v1, v2, t);\n}\nexport function linearStep(n) {\n    return n;\n}\n/**\n * @param callback1 - called when t is 0\n * @param callback2 - called every frame until the animation is finished\n * @param callback3 - called after animation is finished\n * @param t - animation time (seconds)\n * @returns {Promise<void>}\n */\nexport function transitionValues(callback1, callback2, callback3, transitionLength, func) {\n    return new Promise((resolve) => {\n        if (transitionLength == 0) {\n            callback1();\n            resolve();\n        }\n        else {\n            let prevPercent = 0;\n            let prevFrame = 0;\n            let prevTime = Date.now();\n            const step = (t, f) => {\n                const newT = f(t);\n                const canContinue = callback2(newT - prevPercent, t);\n                if (!canContinue) {\n                    window.cancelAnimationFrame(prevFrame);\n                    return;\n                }\n                prevPercent = newT;\n                const now = Date.now();\n                let diff = now - prevTime;\n                diff = diff === 0 ? 1 : diff;\n                const fpsScale = 1 / diff;\n                const inc = 1 / (1000 * fpsScale * transitionLength);\n                prevTime = now;\n                if (t < 1) {\n                    prevFrame = window.requestAnimationFrame(() => step(t + inc, f));\n                }\n                else {\n                    callback3();\n                    resolve();\n                }\n            };\n            step(0, func ? func : linearStep);\n        }\n    });\n}\nexport function compare(val1, val2) {\n    const nullUndefArr = [null, undefined];\n    if (nullUndefArr.includes(val1) || nullUndefArr.includes(val2)) {\n        if (val1 === val2)\n            return true;\n        return false;\n    }\n    if (typeof val1 !== typeof val2)\n        return false;\n    if (Array.isArray(val1) && Array.isArray(val2)) {\n        for (let i = 0; i < Math.max(val1.length, val2.length); i++) {\n            if (!compare(val1[i], val2[i]))\n                return false;\n        }\n        return true;\n    }\n    else if (Array.isArray(val1) || Array.isArray(val2))\n        return false;\n    if (typeof val1 === 'object' && typeof val2 === 'object') {\n        const compareForKeys = (keys, obj1, obj2) => {\n            for (let i = 0; i < keys.length; i++) {\n                if (typeof obj1[keys[i]] !== typeof obj2[keys[i]]) {\n                    return false;\n                }\n                if (typeof obj1[keys[i]] === 'object') {\n                    return compare(obj1[keys[i]], obj2[keys[i]]);\n                }\n                if (obj1[keys[i]] !== obj2[keys[i]]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        const obj1Keys = Object.keys(val1);\n        const obj2Keys = Object.keys(val2);\n        const key1Result = compareForKeys(obj1Keys, val1, val2);\n        const key2Result = compareForKeys(obj2Keys, val1, val2);\n        if (key1Result && key2Result)\n            return true;\n        return false;\n    }\n    return val1 === val2;\n}\nexport function frameLoop(cb) {\n    let prevFrame = 0;\n    let prevTime = 0;\n    function start(dt, ...args) {\n        let res = cb(dt, ...args);\n        if (res === false) {\n            window.cancelAnimationFrame(prevFrame);\n            return;\n        }\n        if (!Array.isArray(res))\n            res = args;\n        const now = Date.now();\n        const diff = now - prevTime;\n        prevTime = now;\n        prevFrame = window.requestAnimationFrame(() => start(diff, ...res));\n    }\n    return (...p) => {\n        prevTime = Date.now();\n        start(0, ...p);\n    };\n}\nfunction getTopPoint(points, camera) {\n    return points.reduce((prev, curr) => (distance3d(curr, camera.pos) <= distance3d(prev, camera.pos) ? curr : prev), points[0]);\n}\nfunction getAveragePointDist(points, camera) {\n    return points.reduce((prev, curr) => prev + distance3d(curr, camera.pos), 0);\n}\nexport function sortPlanes(planes, camera) {\n    const res = planes.sort((a, b) => {\n        const topPointA = getTopPoint(a.points.map((p) => p.clone().add(a.pos)), camera);\n        const topPointB = getTopPoint(b.points.map((p) => p.clone().add(b.pos)), camera);\n        const distA = distance3d(topPointA, camera.pos);\n        const distB = distance3d(topPointB, camera.pos);\n        if (distA === distB) {\n            const avgDistA = getAveragePointDist(a.points, camera);\n            const avgDistB = getAveragePointDist(b.points, camera);\n            return avgDistB - avgDistA;\n        }\n        return distB - distA;\n    });\n    return res;\n}\nexport function projectPoint(p, cam, displaySurface) {\n    const mat1 = [\n        [1, 0, 0],\n        [0, Math.cos(cam.rot.x), Math.sin(cam.rot.x)],\n        [0, -Math.sin(cam.rot.x), Math.cos(cam.rot.x)]\n    ];\n    const mat2 = [\n        [Math.cos(cam.rot.y), 0, -Math.sin(cam.rot.y)],\n        [0, 1, 0],\n        [Math.sin(cam.rot.y), 0, Math.cos(cam.rot.y)]\n    ];\n    const mat3 = [\n        [Math.cos(cam.rot.z), Math.sin(cam.rot.z), 0],\n        [-Math.sin(cam.rot.z), Math.cos(cam.rot.z), 0],\n        [0, 0, 1]\n    ];\n    const mat4 = [[p.x - cam.pos.x], [p.y - cam.pos.y], [p.z - cam.pos.z]];\n    const matRes1 = [\n        [\n            mat1[0][0] * mat2[0][0] + mat1[0][1] * mat2[1][0] + mat1[0][2] * mat2[2][0],\n            mat1[0][0] * mat2[0][1] + mat1[0][1] * mat2[1][1] + mat1[0][2] * mat2[2][1],\n            mat1[0][0] * mat2[0][2] + mat1[0][1] * mat2[1][2] + mat1[0][2] * mat2[2][2]\n        ],\n        [\n            mat1[1][0] * mat2[0][0] + mat1[1][1] * mat2[1][0] + mat1[1][2] * mat2[2][0],\n            mat1[1][0] * mat2[0][1] + mat1[1][1] * mat2[1][1] + mat1[1][2] * mat2[2][1],\n            mat1[1][0] * mat2[0][2] + mat1[1][1] * mat2[1][2] + mat1[1][2] * mat2[2][2]\n        ],\n        [\n            mat1[2][0] * mat2[0][0] + mat1[2][1] * mat2[1][0] + mat1[2][2] * mat2[2][0],\n            mat1[2][0] * mat2[0][1] + mat1[2][1] * mat2[1][1] + mat1[2][2] * mat2[2][1],\n            mat1[2][0] * mat2[0][2] + mat1[2][1] * mat2[1][2] + mat1[2][2] * mat2[2][2]\n        ]\n    ];\n    const matRes2 = [\n        [\n            matRes1[0][0] * mat3[0][0] + matRes1[0][1] * mat3[1][0] + matRes1[0][2] * mat3[2][0],\n            matRes1[0][0] * mat3[0][1] + matRes1[0][1] * mat3[1][1] + matRes1[0][2] * mat3[2][1],\n            matRes1[0][0] * mat3[0][2] + matRes1[0][1] * mat3[1][2] + matRes1[0][2] * mat3[2][2]\n        ],\n        [\n            matRes1[1][0] * mat3[0][0] + matRes1[1][1] * mat3[1][0] + matRes1[1][2] * mat3[2][0],\n            matRes1[1][0] * mat3[0][1] + matRes1[1][1] * mat3[1][1] + matRes1[1][2] * mat3[2][1],\n            matRes1[1][0] * mat3[0][2] + matRes1[1][1] * mat3[1][2] + matRes1[1][2] * mat3[2][2]\n        ],\n        [\n            matRes1[2][0] * mat3[0][0] + matRes1[2][1] * mat3[1][0] + matRes1[2][2] * mat3[2][0],\n            matRes1[2][0] * mat3[0][1] + matRes1[2][1] * mat3[1][1] + matRes1[2][2] * mat3[2][1],\n            matRes1[2][0] * mat3[0][2] + matRes1[2][1] * mat3[1][2] + matRes1[2][2] * mat3[2][2]\n        ]\n    ];\n    const matRes3 = [\n        [matRes2[0][0] * mat4[0][0] + matRes2[0][1] * mat4[1][0] + matRes2[0][2] * mat4[2][0]],\n        [matRes2[1][0] * mat4[0][0] + matRes2[1][1] * mat4[1][0] + matRes2[1][2] * mat4[2][0]],\n        [matRes2[2][0] * mat4[0][0] + matRes2[2][1] * mat4[1][0] + matRes2[2][2] * mat4[2][0]]\n    ];\n    const d = new Vector3(matRes3[0][0], matRes3[1][0], matRes3[2][0]);\n    const bx = (displaySurface.z * d.x) / d.z + displaySurface.x;\n    const by = (displaySurface.z * d.y) / d.z + displaySurface.y;\n    return {\n        point: new Vector(bx, by),\n        behindCamera: d.z <= 0\n    };\n}\nexport function randInt(range, min = 0) {\n    return Math.floor(Math.random() * (range - min)) + min;\n}\nexport function randomColor() {\n    return new Color(randInt(255), randInt(255), randInt(255));\n}\nexport function vector3DegToRad(vec) {\n    return new Vector3(degToRad(vec.x), degToRad(vec.y), degToRad(vec.z));\n}\nexport function vector3RadToDeg(vec) {\n    return new Vector3(radToDeg(vec.x), radToDeg(vec.y), radToDeg(vec.z));\n}\nexport function angleBetweenVector3(vec1, vec2) {\n    const dot = vec1.dot(vec2);\n    let val = dot / (vec1.getMag() * vec2.getMag());\n    val = Math.acos(val);\n    return radToDeg(val);\n}\nexport function clamp(value, min, max) {\n    return Math.max(Math.min(value, max), min);\n}\nexport default {\n    Vector,\n    SimulationElement,\n    SimulationElement3d,\n    Color,\n    SceneCollection,\n    Line,\n    Circle,\n    Polygon,\n    Square,\n    Simulation,\n    pythag,\n    distance,\n    degToRad,\n    radToDeg,\n    transitionValues,\n    compare,\n    Cube,\n    Camera,\n    Plane,\n    lerp,\n    smoothStep,\n    linearStep,\n    frameLoop,\n    randInt,\n    randomColor,\n    vector3DegToRad,\n    vector3RadToDeg,\n    angleBetweenVector3,\n    clamp,\n    Line3d,\n    sortPlanes\n};\n"],
  "mappings": "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",
  "names": ["p"]
}
